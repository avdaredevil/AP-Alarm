<#
|==============================================================================>|
   Dont-Sleep System by APoorv Verma [AP] on 10/14/2013
|==============================================================================>|
      $) Pinging System to keep the computer awake
      $) Automatic detection if user starts to use the computer
      $) Status Reportinh
      $) Key Press Handling
         @) 'Esc'       = Quit
         @) 's',"Enter" = Ping Statistics
|==============================================================================>|
#>
param([Switch]$NoAwayMode)
# =======================================START=OF=COMPILER==========================================================|
#    The Following Code was added by AP-Compiler Version [1.2] To Make this program independent of AP-Core Engine
#    GitHub: https://github.com/avdaredevil/AP-Compiler
# ==================================================================================================================|
$Script:PSHell=$(if($PSHell){$PSHell}elseif($PSScriptRoot){$PSScriptRoot}else{"."});
iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))
# ========================================END=OF=COMPILER===========================================================|


[void][reflection.assembly]::loadwithpartialname("system.windows.forms")
$Script:Loops  = 0
$Script:TotalMisses = 0
$Script:AckedMisses = 0
$Script:ACK = 0
function Keys ($f = -2){
    while ($Host.UI.RawUI.KeyAvailable) {
        $Store = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyUp")
        If ((KeyPressed "~~ScrollLock~~" $Store) -and $Script:LastACK -ne $Script:Loops) {
            Write-AP "+Ping Recieved [$Script:Loops]"
            $Script:AckedMisses = $Script:TotalMisses
            $Script:ACK++
            $Script:LastACK = $Script:Loops
        } ElseIf ($f -eq -2) {
            If (KeyPressed "q","x","~~Escape~~" $Store) {Write-AP "!QUIT...";exit}
            ElseIf (KeyPressed "s",'~~Enter~~' $Store) {Write-AP "+Total Sent [$Script:Loops] | Reception : $(($Script:Loops-$Script:TotalMisses)/$Script:Loops*100)%"}
        }
    }
    if ($f -ne "-2") {if ($Script:Loops -ne $Script:Ack) {Write-AP "-Ping Failed [$Script:Loops]";$Script:TotalMisses++;$Script:ACK++}}
}
while ($true) {
    $Script:Loops++
    [system.windows.forms.sendkeys]::sendwait("{scrolllock 2}")
    start-sleep -m 250
    Keys -3
    foreach ($i in 1..5) {
        start-sleep -s 3
        Keys
        if (!$NoAwayMode -and $Script:TotalMisses-$Script:AckedMisses -gt 1) {
            Write-AP "!Away Mode Enabled, please enable manually"
            pause
            [Console]::CursorTop-=1;Clear-Line
        }
    }
}
